<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TankSim.Client</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.GameIdServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.GameIdServiceExtensions.AddGameIDService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add GameIDService to set GameID for ardNet config
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.GameNetConfigExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.GameNetConfigExtensions.AddTankSimConfig(ArdNet.Client.DependencyInjection.ArdNetClientConfigurator)">
            <summary>
            Add ArdNet config for tank sim
            </summary>
            <param name="Config"></param>
            <returns></returns>
        </member>
        <member name="T:TankSim.Client.OperatorDelegates.DriverDelegate">
            <summary>
            Operator module - driver
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.DriverDelegate.#ctor(ArdNet.IArdNetSystem)">
            <summary>
            Create instance.
            </summary>
            <param name="ArdSys"></param>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.DriverDelegate.Stop">
            <summary>
            Send stop command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.DriverDelegate.DriveForward">
            <summary>
            Send forward command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.DriverDelegate.DriveBackward">
            <summary>
            Send backward command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.DriverDelegate.Dispose">
            <summary>
            Unhook topics
            </summary>
        </member>
        <member name="T:TankSim.Client.OperatorDelegates.FireControlDelegate">
            <summary>
            Operator module - fire control
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.FireControlDelegate.#ctor(ArdNet.IArdNetSystem)">
            <summary>
            Create instance.
            </summary>
            <param name="ArdSys"></param>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.FireControlDelegate.FirePrimary">
            <summary>
            Send primary fire command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.FireControlDelegate.FireSecondary">
            <summary>
            Send secondary fire command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.FireControlDelegate.Dispose">
            <summary>
            Unhook topics
            </summary>
        </member>
        <member name="T:TankSim.Client.OperatorDelegates.GunLoaderDelegate">
            <summary>
            Operator module - gun loader
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.GunLoaderDelegate.#ctor(ArdNet.IArdNetSystem)">
            <summary>
            Create instance.
            </summary>
            <param name="ArdSys"></param>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.GunLoaderDelegate.Load">
            <summary>
            Send load command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.GunLoaderDelegate.CycleAmmoType">
            <summary>
            Send cycle ammo command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.GunLoaderDelegate.Dispose">
            <summary>
            Unhook topics
            </summary>
        </member>
        <member name="T:TankSim.Client.OperatorDelegates.GunRotationDelegate">
            <summary>
            Operator module - gun rotation
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.GunRotationDelegate.#ctor(ArdNet.IArdNetSystem)">
            <summary>
            Create instance.
            </summary>
            <param name="ArdSys"></param>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.GunRotationDelegate.Stop">
            <summary>
            Send stop command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.GunRotationDelegate.TurnLeft">
            <summary>
            Send left command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.GunRotationDelegate.TurnRight">
            <summary>
            Send right command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.GunRotationDelegate.Dispose">
            <summary>
            Unhook topics
            </summary>
        </member>
        <member name="T:TankSim.Client.OperatorDelegates.NavigatorDelegate">
            <summary>
            Operator module - driver
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.NavigatorDelegate.#ctor(ArdNet.IArdNetSystem)">
            <summary>
            Create instance.
            </summary>
            <param name="ArdSys"></param>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.NavigatorDelegate.Stop">
            <summary>
            Send stop command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.NavigatorDelegate.TurnLeft">
            <summary>
            Send left command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.NavigatorDelegate.TurnRight">
            <summary>
            Send right command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.NavigatorDelegate.Dispose">
            <summary>
            Unhook topics
            </summary>
        </member>
        <member name="T:TankSim.Client.OperatorDelegates.RangeFinderDelegate">
            <summary>
            Operator module - range finder
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.RangeFinderDelegate.#ctor(ArdNet.IArdNetSystem)">
            <summary>
            Create instance.
            </summary>
            <param name="ArdSys"></param>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.RangeFinderDelegate.Stop">
            <summary>
            Send stop command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.RangeFinderDelegate.AimFarther">
            <summary>
            Send farther command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.RangeFinderDelegate.AimCloser">
            <summary>
            Send closer command to host
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorDelegates.RangeFinderDelegate.Dispose">
            <summary>
            Unhook topics
            </summary>
        </member>
        <member name="T:TankSim.Client.OperatorModules.IOperatorInputMsg">
            <summary>
            Operator input message
            </summary>
        </member>
        <member name="P:TankSim.Client.OperatorModules.IOperatorInputMsg.IsHandled">
            <summary>
            Flag switch to determine if a handler has reacted to this message
            </summary>
        </member>
        <member name="P:TankSim.Client.OperatorModules.IOperatorInputMsg.KeyInfo">
            <summary>
            Key data
            </summary>
        </member>
        <member name="P:TankSim.Client.OperatorModules.IOperatorInputMsg.InputType">
            <summary>
            UI key input action
            </summary>
        </member>
        <member name="T:TankSim.Client.OperatorModules.IOperatorModule">
            <summary>
            Operator role module
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorModules.IOperatorModule.HandleInput(TankSim.Client.OperatorModules.IOperatorInputMsg)">
            <summary>
            Handle user input
            </summary>
            <param name="Input"></param>
        </member>
        <member name="T:TankSim.Client.OperatorModules.IOperatorModuleCollection">
            <summary>
            Collection of operator modules
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorModules.IOperatorModuleCollection.SendInput(TankSim.Client.OperatorModules.IOperatorInputMsg)">
            <summary>
            Send user input to modules
            </summary>
            <param name="Input"></param>
        </member>
        <member name="T:TankSim.Client.OperatorModules.IOperatorModuleFactory">
            <summary>
            Factory to get operator role modules once the client knows its responsibilities
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorModules.IOperatorModuleFactory.GetModuleCollection(TankSim.OperatorRoles)">
            <summary>
            Get collection of UI operator modules for the required role sets
            </summary>
            <param name="Roles"></param>
            <returns></returns>
        </member>
        <member name="T:TankSim.Client.OperatorModules.OperatorModuleBase">
            <summary>
            Shared base for operator modules
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleBase.HandleInput(TankSim.Client.OperatorModules.IOperatorInputMsg)">
            <summary>
            Handle input key sequence
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleBase.ValidateKeyPress(TankSim.Client.OperatorModules.IOperatorInputMsg,System.String)">
            <summary>
            Validate input keycode against target key sequence
            </summary>
            <param name="Input"></param>
            <param name="TargetInput"></param>
            <returns></returns>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleBase.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:TankSim.Client.OperatorModules.OperatorInputMsg">
            <summary>
            Operator input message
            </summary>
        </member>
        <member name="P:TankSim.Client.OperatorModules.OperatorInputMsg.IsHandled">
            <summary>
            Flag switch to determine if a handler has reacted to this message
            </summary>
        </member>
        <member name="P:TankSim.Client.OperatorModules.OperatorInputMsg.KeyInfo">
            <summary>
            Key data
            </summary>
        </member>
        <member name="P:TankSim.Client.OperatorModules.OperatorInputMsg.InputType">
            <summary>
            UI key input action
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorInputMsg.#ctor(System.ConsoleKeyInfo,TankSim.KeyInputType)">
            <summary>
            Create new instance
            </summary>
            <param name="KeyInfo">Key info from input</param>
            <param name="InputType">Input action</param>
        </member>
        <member name="T:TankSim.Client.OperatorModules.OperatorModuleCollection">
            <summary>
            Operator module collection
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleCollection.AddModule(TankSim.Client.OperatorModules.IOperatorModule)">
            <summary>
            Add new operator module
            </summary>
            <param name="Module"></param>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleCollection.AddModules(System.Collections.Generic.IEnumerable{TankSim.Client.OperatorModules.IOperatorModule})">
            <summary>
            Add new operator module
            </summary>
            <param name="Modules"></param>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleCollection.SendInput(TankSim.Client.OperatorModules.IOperatorInputMsg)">
            <summary>
            Send input to all managed modules.
            Propagation stops after the input command is handled
            </summary>
            <param name="Input"></param>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleCollection.GetEnumerator">
            <summary>
            Return list enumerator for the contained modules
            </summary>
            <returns></returns>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleCollection.Dispose">
            <summary>
            Dispose all operator modules
            </summary>
        </member>
        <member name="T:TankSim.Client.OperatorModules.OperatorModuleFactory">
            <summary>
            Magic factory for loading operator modules from execution context at runtime.
            Searches execution process for <see cref="T:TankSim.Client.OperatorModules.IOperatorModule"/> implementations with <see cref="T:TankSim.OperatorRoleAttribute"/> defined.
            Maps operator role to tagged modules.
            Instantiates modules on-demand when a role is requested.
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleFactory.#cctor">
            <summary>
            Load role->module map at startup
            </summary>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleFactory.#ctor(System.IServiceProvider)">
            <summary>
            Create instance
            </summary>
            <param name="ServiceProvider"></param>
        </member>
        <member name="M:TankSim.Client.OperatorModules.OperatorModuleFactory.GetModuleCollection(TankSim.OperatorRoles)">
            <summary>
            Get module collection based on requested operator roles.
            </summary>
            <param name="Roles">Set of required operator roles to load</param>
            <returns>Return a module collection loaded with modules for all requested operator roles</returns>
        </member>
        <member name="T:TankSim.Client.Services.GameIdService">
            <summary>
            Class to set/modify game ID for ardNet connector
            </summary>
        </member>
        <member name="P:TankSim.Client.Services.GameIdService.GameID">
            <summary>
            GameID property
            </summary>
        </member>
        <member name="T:TankSim.Client.CLI.Services.IGameScopeService">
            <summary>
            Service for getting valid ArdNet game connection
            </summary>
        </member>
        <member name="M:TankSim.Client.CLI.Services.IGameScopeService.GetValidGameScope">
            <summary>
            Get ServiceScope with valid ArdNet game connection
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
